from fastapi import FastAPI, Depends, HTTPException
from pydantic import BaseModel
from typing import List

app = FastAPI()

# In-memory list to simulate a database
fake_db = []

class Blog(BaseModel):
    title: str
    content: str

@app.post("/blogs", response_model=Blog)
def create_blog(blog: Blog):
    fake_db.append(blog)
    return blog

@app.get("/blogs", response_model=List[Blog])
def read_blogs(skip: int = 0, limit: int = 10):
    return fake_db[skip : skip + limit]

@app.get("/blogs/{blog_id}", response_model=Blog)
def read_blog(blog_id: int):
    if blog_id < 0 or blog_id >= len(fake_db):
        raise HTTPException(status_code=404, detail="Blog not found")
    return fake_db[blog_id]

@app.put("/blogs/{blog_id}", response_model=Blog)
def update_blog(blog_id: int, updated_blog: Blog):
    if blog_id < 0 or blog_id >= len(fake_db):
        raise HTTPException(status_code=404, detail="Blog not found")
    fake_db[blog_id] = updated_blog
    return updated_blog

@app.delete("/blogs/{blog_id}", response_model=Blog)
def delete_blog(blog_id: int):
    if blog_id < 0 or blog_id >= len(fake_db):
        raise HTTPException(status_code=404, detail="Blog not found")
    deleted_blog = fake_db.pop(blog_id)
    return deleted_blog
